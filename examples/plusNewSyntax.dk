#NAME plus.

nat : Type.
Z : nat.
S : nat -> nat.

def plus : nat -> nat -> nat.

def double : nat -> nat.

plus Z      (S ?m) --> S ?m,
plus ?n     Z      --> ?n,
plus (S ?n) (S ?m) --> S (S (plus ?n ?m)).

e : nat -> Type.
def x : e Z.
y : e (plus Z Z).

x --> y.

def eq : nat -> nat -> nat.
eq ?n ?n --> S Z.

#EVAL (x => x) Z.
#EVAL plus (S Z) (S (S Z)).
#EVAL eq (S (S Z)) (S (S Z)).
