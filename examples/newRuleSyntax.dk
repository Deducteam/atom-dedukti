A : Type.
B : Type.

def f : (A -> B) -> A -> B.

f (x => ?m[x]) ?n --> ?m[?n].

E : Type.
e : E.
T : Type.

def F : (T -> T) -> (T -> T) -> E.

F (x => ?X[x]) (x => ?X[x]) --> e.

#EVAL F (x => x) (x => (x => x) x).
#EVAL F (x => x) (x => (y => x) x).

Nat: Type.
Z  : Nat.
S  : Nat -> Nat.

def plus: Nat -> Nat -> Nat.

plus Z      ?m --> ?m,
plus (S ?n) ?m --> S (plus ?n ?m).

Listn : Nat -> Type.
nil   : Listn Z.
cons  : n:Nat -> A -> Listn n -> Listn (S n).

def append: n:Nat -> Listn n -> m:Nat -> Listn m -> Listn (plus n m).

append _ nil              _  ?l2 --> ?l2,
append _ (cons ?n ?a ?l1) ?m ?l2 --> cons (plus ?n ?m) ?a (append ?n ?l1 ?m ?l2).
